{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Users Manager API",
        "description": "An API to manage users stored within any database",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "host": "localhost:3000",
    "basePath": "/",
    "tags": [
        {
            "name": "Users",
            "description": "API for users in the system"
        }
    ],
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/adduser": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Create new user and stores it on the database",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "User to be created",
                        "schema": {
                            "$ref": "#/definitions/UpdateOrCreateUser"
                        }
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "New user is created",
                        "schema": {
                            "$ref": "#/definitions/Success"
                        }
                    },
                    "400": {
                        "description": "An internal error did not allow the creation of a new user.",
                        "schema": {
                            "$ref": "#/definitions/failures"
                        }
                    },
                    "422": {
                        "description": "one of the properties within the req body is invalid or missing",
                        "schema": {
                            "$ref": "#/definitions/Invalid"
                        }
                    }
                }
            }
        },
        "/getusers": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Returns all users stored on the database",
                "parameters": [
                    {
                        "name": "method",
                        "in": "query",
                        "required": false,
                        "description": "Method used to filter users",
                        "type": "string"
                    },
                    {
                        "name": "keyWord",
                        "in": "query",
                        "required": false,
                        "description": "A key word used to find users and in case of matches, a filter is applied",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    },
                    "400": {
                        "description": "A bad request throws an error that shows what happened to it",
                        "schema": {
                            "$ref": "#/definitions/failures"
                        }
                    },
                    "404": {
                        "description": "An attempt of filtering users has not been possible",
                        "schema": {
                            "$ref": "#/definitions/failures"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "required": [
                "name",
                "age",
                "city",
                "role",
                "department_number"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "department_number": {
                    "type": "integer"
                }
            }
        },
        "UpdateOrCreateUser": {
            "required": [
                "name",
                "age",
                "city",
                "role",
                "department_number"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "department_number": {
                    "type": "integer"
                }
            }
        },
        "Users": {
            "type": "array",
            "$ref": "#/definitions/User"
        },
        "Success": {
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "Invalid": {
            "properties": {
                "status": {
                    "type": "string"
                },
                "reason": {
                    "ty": "string"
                },
                "details": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "failures": {
            "properties": {
                "status": {
                    "type": "string"
                },
                "reason": {
                    "ty": "string"
                }
            }
        }
    }
}
